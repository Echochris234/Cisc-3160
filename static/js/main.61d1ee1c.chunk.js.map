{"version":3,"sources":["pages/AboutUsPage.js","components/Loading.js","pages/DisplayImage.js","App.js","serviceWorker.js","index.js"],"names":["AboutUsPage","props","Loading","Image","prop","console","log","image","Card","style","width","Img","variant","src","hdurl","Body","Title","copyright","Text","explanation","DisplayImage","state","images","fetch","then","res","json","setState","catch","err","this","map","picture","CardDeck","React","Component","Navigation","className","to","exact","App","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"iRAQeA,MANf,SAAqBC,GACnB,OACE,yDCQWC,I,gBCNf,SAASC,EAAMC,GAEX,OADAC,QAAQC,IAAIF,EAAKG,OAIb,6BAeI,kBAACC,EAAA,EAAD,CAAMC,MAAO,CAAEC,MAAO,UAClB,kBAACF,EAAA,EAAKG,IAAN,CAAUC,QAAQ,MAAMC,IAAKT,EAAKG,MAAMO,QACxC,kBAACN,EAAA,EAAKO,KAAN,KACI,kBAACP,EAAA,EAAKQ,MAAN,KAAaZ,EAAKG,MAAMU,WACxB,kBAACT,EAAA,EAAKU,KAAN,KACKd,EAAKG,MAAMY,gB,IAwDrBC,E,4MA3CXC,MAAQ,CACJC,OAAO,I,kEAGU,IAAD,OAEhBC,MAAM,4GACDC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAF,GACF,EAAKK,SAAS,CACVL,OAAOA,OAGdM,OAAM,SAAAC,GACH,EAAKF,SAAS,CACVL,OAAO,U,+BAOnB,OAGDQ,KAAKT,MAAMC,OAAOS,KAAI,SAACC,GAEf,OACC,6BACI,kBAACC,EAAA,EAAD,KACG,kBAAC9B,EAAD,CAAOI,MAAOyB,a,GA/BVE,IAAMC,W,MC5BjC,SAASC,EAAWnC,GAClB,OACE,yBAAKoC,UAAU,2DACb,kBAAC,IAAD,CAAMA,UAAU,eAAeC,GAAG,cAAlC,aACA,wBAAID,UAAU,sBACZ,wBAAIA,UAAU,YACZ,kBAAC,IAAD,CAASA,UAAU,WAAWE,OAAK,EAACD,GAAG,cAAvC,kBAIF,wBAAID,UAAU,YACZ,kBAAC,IAAD,CAASA,UAAU,WAAWE,OAAK,EAACD,GAAG,uBAAvC,e,IA+BKE,E,uKAnBX,OACI,kBAAC,IAAD,KACE,kBAACJ,EAAD,MACA,yBAAKC,UAAU,+BACb,yBAAKA,UAAU,8BACb,kBAAC,IAAD,KACA,kBAAC,IAAD,CAAOI,KAAK,aAAaC,UAAWtB,IAEpC,kBAAC,IAAD,CAAOqB,KAAK,sBAAsBC,UAAW1C,Y,GAVzCkC,IAAMC,WCxBJQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM9B,MAAK,SAAA+B,GACjCA,EAAaC,kB","file":"static/js/main.61d1ee1c.chunk.js","sourcesContent":["import React from 'react';\n\nfunction AboutUsPage(props) {\n  return (\n    <div>A little info about us.</div>\n  );\n}\n\nexport default AboutUsPage;","import React from 'react';\n\nfunction Loading() {\n  return (\n    <div className=\"d-flex justify-content-center\">\n      <div className=\"spinner-border\" role=\"status\">\n        <span className=\"sr-only\">Loading...</span>\n      </div>\n    </div>\n  );\n}\n\nexport default Loading;","import React from 'react';\nimport Post from '../components/Post';\nimport Loading from '../components/Loading';\nimport { Redirect } from 'react-router-dom';\nimport { Card, CardDeck, Carousel } from 'react-bootstrap'\n\nfunction Image(prop){\n    console.log(prop.image);\n    return(\n\n        \n        <div>\n\n            {/* <Carousel.Item interval={1000}>\n                <img\n                    className=\"d-block w-100\"\n                    src={prop.image.hdurl}\n                    alt=\"\"\n                />\n                <Carousel.Caption>\n                    {prop.image.copyright}\n                    {prop.image.explanation}\n                </Carousel.Caption>\n            </Carousel.Item> */}\n\n\n            <Card style={{ width: '18rem' }}>\n                <Card.Img variant=\"top\" src={prop.image.hdurl} />\n                <Card.Body>\n                    <Card.Title>{prop.image.copyright}</Card.Title>\n                    <Card.Text>\n                        {prop.image.explanation}\n                        </Card.Text>\n                    \n                </Card.Body>\n            </Card>\n        \n        </div>\n        \n    )\n    \n    // <img src=\"\" />\n}\nclass DisplayImage extends React.Component {\n    state = {\n        images:[]\n    }\n\n    componentDidMount() {\n        // const { id } = this.props.match.params;\n        fetch(\"https://api.nasa.gov/planetary/apod?api_key=ou2bvWawMCbcGuXaqdVlHtlDMahcnKi4Kgg7aRnm&count=4&thumbs=true\")\n            .then(res => res.json())\n            .then(images => {\n                this.setState({\n                    images:images\n                });\n            })\n            .catch(err => {\n                this.setState({\n                    images:[]\n                });\n            });\n    }\n\n\n    render() {\n        return(\n        // if (this.state.notFound) return <Redirect to=\"/\" />;\n        // if (this.state.loading) return <Loading />;\n       this.state.images.map((picture)=>{\n           \n               return( \n                <div>\n                    <CardDeck>\n                       <Image image={picture}/>\n                    </CardDeck>\n                    \n                </div>   \n               )\n           \n            \n\n       })\n        )\n    }\n}\n\nexport default DisplayImage;","import React from 'react';\nimport { \n  BrowserRouter as Router, \n  Switch, \n  Route, \n  Link,\n  NavLink\n} from 'react-router-dom';\n\nimport AboutUsPage from './pages/AboutUsPage';\nimport DisplayImage from './pages/DisplayImage';\n\nimport './App.css';\n\n\nfunction Navigation(props) {\n  return (\n    <nav className=\"navbar navbar-expand-sm navbar-dark bg-dark shadow mb-3\">\n      <Link className=\"navbar-brand\" to=\"/Cisc-3160\">3160 Labs</Link>\n      <ul className=\"navbar-nav mr-auto\">\n        <li className=\"nav-item\">\n          <NavLink className=\"nav-link\" exact to=\"/Cisc-3160\">\n            Display Image\n          </NavLink>\n        </li>\n        <li className=\"nav-item\">\n          <NavLink className=\"nav-link\" exact to=\"/Cisc-3160/about-us\">\n            About Us\n          </NavLink>\n        </li>\n      </ul>\n    </nav>\n  );\n}\n\n\nclass App extends React.Component {\n  render() {\n    return (\n        <Router>\n          <Navigation />\n          <div className=\"container-fluid text-center\">\n            <div className=\"row justify-content-center\">\n              <Switch>\n              <Route path=\"/Cisc-3160\" component={DisplayImage} />\n                \n              <Route path=\"/Cisc-3160/about-us\" component={AboutUsPage} />\n                \n              </Switch>\n            </div>\n          </div>\n        </Router>\n    );\n  }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}