Finding information on both of these languages seemed rather easy once I knew what it was I was looking for, initially it took a while to get up and running with the basics reading through the documentation and picking up the syntax. But once you know one language it's not difficult to pick up a second or third, even if it's just the basics. For Python the big learning curve that I had to get over was understanding that there is no parenthesis involved but instead relies on indenting to inform the compiler that certain elements are nested within functions or loops. Another roadblock for me using python was how to loop through arrays or just data in general. It uses a different convention rather than the standard for loops like java or C++. A loop in Python would look similar to the following  `for items in range(0,100):` A neat trick that python does have is that it's not heavily typed like C++ is where each instance must have a data type and cannot be dynamic. Since python is a language that the compiler can understand directly, creating a multithreaded application seemed like a great way to use built in libraries while also experimenting with a new style of programming. C++ is very similar to java in some instances but requires a little more overhead in terms of declaring the functions that will be used in the application as well as importing any helper files that will assist the main program. A roadblock I ran into with C++ was really printing things out using the cout library and creating a solid template that does what I need it to do. Templates generalize data that is passed into it and does not fail if the data type is different from the last. C++ also has a whole side of data manipulation where one has to manage their own memory as well as clean any data that is left stale. One uses pointers * and references & in order to pass around data to other functions in a clean manner that overpopulate your memory.
